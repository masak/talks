# Omit needless code

### Short, shorter, beautiful

<small>by masak, for PLPW 2013</small>

----

Three years ago, I wrote a blogging engine in Perl 6.

----

I was proud the I could get it to be "just" 256 LoC.

Not anymore.

----

![four use cases](four-use-cases.png)

----

![as prose](as-prose.png)

----

Where does all the repetition come from?

----

Most of it is *plumbing*.

Code spent describing how data should flow.

----

Some code is spent trying to do less work.

    sub nonexistent-or-older($target, :than(@sources)!) {
        return $target.IO !~~ :e
               || $target.IO.changed before any(@sources).IO.changed;
    }

----

Takes 4 minutes to generate the whole site from scratch.

79 seconds to just generate one post.

----

Need a nice abstraction here.

How can we capture data flow?

----

## Introducing Pipes

A `Pipe` is an object that can apply a function.

Take some input; return some output.

    @input
      ==> fn
      ==> @output

----

The nice thing? Composability.

You just chain two pipes together!

    @input
      ==> fn1
      ==> fn2
      ==> @output

----

The result:

    @posts
      ==> publish from_template('post.html', :!titlelink, :&humandate)
      ==> into '${url}.html';
     
    @posts
      ==> publish from_template('postitem.html')
      ==> aggregate from_template('postlist.html')
      ==> into 'list-of-posts.html';
     
    @posts
      ==> take 3
      ==> publish from_template('post.html', :titlelink)
      ==> aggregate from_template('index.html')
      ==> into 'index.html';
     
    @posts
      ==> take 10
      ==> publish from_template('entry.atom')
      ==> aggregate from_template('feed.atom')
      ==> into 'feed.atom';

----

Some helper code:

    # (before everything)
    feed('posts/')
      ==> set 'root', 'http://strangelyconsistent.org/blog/'
      ==> convert 'body', &markdown_to_html
      ==> my @posts;

    # (utility subroutine)
    my @monthnames = <Jan Feb Mar Apr
                      May Jun Jul Aug
                      Sep Oct Nov Dec>;
     
    sub humandate(%params) {
        %params<created> ~~ /(\d\d\d\d) '-' (\d\d) '-' (\d\d)/;
        given Date.new("$0-$1-$2") {
            die "Won't publish $markdown_filename which claims it was created $_"
                when * after Date.today;
             return sprintf "%d %s, %d", .day, @monthnames[.month-1], .year;
        }
    }

----

Check statically, run more safely

----

Pipes rock.

----

I plan to release pipes as a standalone module Real Soon.

And a small web framework that uses them.

Stay tuned!

----

dziękuję!
